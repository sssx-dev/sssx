/* eslint-disable @typescript-eslint/no-explicit-any */
import fs from 'fs'
import { config, OUTDIR } from "../config/index.js"
import type { RoutePermalinkFn } from "../types/Route"
import { RouteErrors } from '../types/Errors.js';

/**
 * 
 * @param suffix route generated by permalink, like `/blog/bar/foo`
 * @param routeName 
 */
const validateRouteExists = (suffix:string, routeName:string) => {
    const filename = `${process.cwd()}/${config.distDir}/${config.routesPath}/${routeName}.txt`

    if(fs.existsSync(filename)){
        const paths = fs.readFileSync(filename, {encoding:'utf8'}).split(`\n`)
        if(!paths.includes(suffix.toLowerCase()))
            throw new Error(RouteErrors[101001](suffix, filename))
        // console.log(`getPermalink`, {suffix}, paths)
    }else{
        // console.log(`getPermalink, file with paths does not exist yet`, {filename, suffix})
    }
}

type Options = {
    relative?: boolean
    checkExistingRoutes?: boolean
}

const defaultOptions:Options = {
    relative: true,
    checkExistingRoutes: true
}

/**
 * Generate path from (@type AbstractItem) using @param permalink function/string
 * @param request, an object that has shape of a Route's `getAll` function's return
 * @param permalink â€“ function or string defined in your `route.ts` file inside `routes`, @example `/blog/:slug/`
 * @returns route's path like `/blog/route1/`
 */
export const getPermalink = <T extends Record<string, any>>(routeName:string, request:T, permalink:RoutePermalinkFn<T>, options:Options = defaultOptions):string => {
    const opts = Object.assign({}, defaultOptions, options)
    let suffix = ''

    if(typeof permalink === 'string'){
        const array = permalink.split(`/`)
        suffix = array.map((param:string) => {
            if(param.startsWith(`:`))
                return request[param.slice(1)]
            return param
        }).join(`/`)
        
    }else{
        suffix = permalink(request)
    }

    if(opts.checkExistingRoutes){
        validateRouteExists(suffix, routeName)
    }

    return opts.relative ? suffix : `${OUTDIR}${suffix}`
}