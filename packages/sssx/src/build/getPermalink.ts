/* eslint-disable @typescript-eslint/no-explicit-any */
import path from 'path';
import fs from '../lib/fs.js';
import { GENERATED_ROUTES, OUTDIR } from '@sssx/config';
import type { PageData, PagePermalink } from '../types/Route.js';
import { RouteErrors } from '../types/Errors.js';
import Logger from '@sssx/logger';

/**
 *
 * @param suffix route generated by permalink, like `/blog/bar/foo`
 * @param routeName
 */
const validateRouteExists = (suffix: string, routeName: string) => {
  const filename = path.resolve(GENERATED_ROUTES, `${routeName}.txt`);

  if (fs.existsSync(filename)) {
    const paths = fs.readFileSync(filename, 'utf8'); //.split(`\n`);
    if (!paths.includes(suffix.toLowerCase()))
      throw new Error(RouteErrors[101001](suffix, filename));
    Logger.verbose(`getPermalink`, { suffix }, paths);
  } else {
    Logger.warn(`getPermalink, file with paths does not exist yet`, { filename, suffix });
  }
};

type Options = {
  relative?: boolean;
  checkExistingRoutes?: boolean;
};

const defaultOptions: Options = {
  relative: true,
  checkExistingRoutes: true
};

/**
 * Generate path from (@type AbstractItem) using @param permalink function/string
 * @param request, an object that has shape of a Route's `getAll` function's return
 * @param permalink â€“ function or string defined in your `route.ts` file inside `routes`, @example `/blog/:slug/`
 * @returns route's path like `/blog/route1/`
 */
export const getPermalink = (
  routeName: string,
  data: PageData,
  permalink: PagePermalink,
  options: Options = defaultOptions
): string => {
  const opts = Object.assign({}, defaultOptions, options);
  let suffix = '';

  Logger.verbose('getPermalink', { routeName, data, permalink, opts });

  if (typeof permalink === 'string') {
    const array = permalink.split(`/`);
    suffix = array
      .map((param: string) => {
        if (param.startsWith(`:`)) return data[param.slice(1)];
        return param;
      })
      .join(`/`);
  } else {
    suffix = permalink(data);
  }

  if (opts.checkExistingRoutes) {
    validateRouteExists(suffix, routeName);
  }

  return opts.relative ? suffix : `${OUTDIR}${suffix}`;
};
